using System;


public class individual 
{
	public bool gender;
	public int geneticHairConfiguration;
	public int geneticEyeConfiguration;
	public int geneticSkinConfiguration;
	public individual(bool gender, int geneticHairConfiguration, int geneticEyeConfiguration, int geneticSkinConfiguration)
	{
		this.gender = gender;
		this.geneticHairConfiguration = geneticHairConfiguration;
		this.geneticEyeConfiguration = geneticEyeConfiguration;
		this.geneticSkinConfiguration = geneticSkinConfiguration;
	}
	
}

public class Program
{
	public static void Main()
	{
	createFirstIndividual();
	individual firstIndividual = new individual(1, firstIndividual_Hair, firstIndividual_Eye, firstIndividual_Skin);
	createSecondIndividual();
	individual secondIndividual = new individual(0, secondIdividual_Hair, secondIndividual_Eye, secondIndividual_Skin);
	Console.WriteLine("Digite o número de gerações");
	int generations = int.Parse(Console.ReadLine());
	individual[] individualsArray = new individual[generations];
	Random randomNumber = new Random();
	int id1 = 1;	
	int id2 = id1 + 1;
	int totalNumberOfCreatures = 0;
	int numberOfIndividualsThatDiedWithoutProcriating = 0;
	int totalNumberOfCouples = 0;
	
	for(int i=0;i=<generations;i++)
	{
		for(int j=0;j=<numberOfCouples;j++)
		{
		int bornCreatures = randomNumber.Next(0,6); //Generates a random number of born creatures for the next generation
		for(int j=0;j=<bornCreatures;j++) // Creates an object for each born creature
		{
			id1 = id1 + 1
			CalculateAndGiveIndividualGeneticPool();
			individualsArray[id1] = new individual();
		}
		if (bornCreatures % 2 == 0) /*/ check if the number of born creature is even or odd, to choose randomly two of them 
		and cross them again, while those who doesn't have a pair just die without procriating/*/	
		{
		//Choose randomly the creatures that will procriate
		int creature1 = randomNumber.Next(0, bornCreatures + 1);
		while(creature2 = creature1)
		int creature1 = randomNumber.Next(0, bornCreatures + 1);
		break;
		int numberOfCouples = ;
		CalculateOffspringGeneticPool();
		}
		
	
		else
		{
		}	
		
		CalculateOffspringGeneticPool(bornCreatures, individualsArray[id1], individualsArray[id2]); /*/Calculates and gives the genetic configuration
		for the born creatures based on the genetic configuration of their parents (last two parameters)/*/	
		
	}
	Console.WriteLine("final");
	 
	}
}



